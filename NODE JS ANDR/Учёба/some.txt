Промис (Promise) — специальный объект JavaScript, который используется для написания и обработки асинхронного кода.
Промис может находиться в одном из трёх состояний:
                 pending — стартовое состояние, операция стартовала;
                 fulfilled — получен результат;
                 rejected — ошибка.
Асинхронная функция fetch() возвращает промис
У промиса есть методы then() и catch(), которые позволяют использовать результат вычисления внутри промиса.
С помощью методов then(), catch() и finally() мы можем реагировать на изменение состояния промиса и использовать результат его выполнения.
Метод then() используют, чтобы выполнить код после успешного выполнения асинхронной операции.
Метод catch() используют, чтобы выполнить код в случае ошибки при выполнении асинхронной операции.
Метод finally() используют, чтобы выполнить код при завершении асинхронной операции. Он будет выполнен вне зависимости от того, была ли операция успешной или завершилась ошибкой.
Сообщение-запрос по протоколу JSON-RPC должно иметь 3 обязательных поля:
   method — строка с именем вызываемого метода.
   params — массив данных, которые должны быть переданы методу, как параметры.
   id — значение любого типа, которое используется для установки соответствия между запросом и ответом.
В ответ сервер должен прислать сообщение, содержащее:
    result — данные, которые вернул метод. Если произошла ошибка во время выполнения метода, это свойство должно быть установлено в null.
   error — код ошибки, если произошла ошибка во время выполнения метода, иначе null.
   id — то же значение, что и в запросе, к которому относится этот ответ.
После числа идёт сообщение статуса — оно объясняет, что произошло. Код и сообщения статуса хранятся в свойствах объекта ответа status и statusText:
Чтобы получить значение заголовка, есть метод get
Вы уже знаете, что от сервера приходит объект ответа. Чтобы получить из него данные, нужно вызвать встроенный метод  json
Чтобы разобрать тело ответа, есть специальные методы:
   res.json — разбирает JSON в объект, этот метод вы уже знаете;
   res.text — разбирает тело как текст;
   res.blob — разбирает тело ответа как бинарные данные: это нужно при      получении файлов (изображений, видео, pdf-документов).

Прототип объекта — это другой объект, где движок будет искать свойство или метод, если их нет в исходном объекте.
Массивы тоже объекты. При этом у массивов есть собственные методы: push, filter, map и другие
Массив — это объект, потому у него тоже есть свойство __proto__
Заглавная буква в названии объекта Array подсказывает, что это особый объект. На самом деле, это встроенная функция-конструктор массива. Её можно вызвать с оператором new, чтобы создать массив:
const arr = new Array(1, 2, 3);

console.log(arr); // [1, 2, 3]

Если функцию вызывают как метод объекта, this содержит ссылку на объект, на котором она вызвана:

Функция prompt, как и alert, показывает диологовое окно с сообщением, преданным в скобках. Но, кроме этого prompt позволяет получить какое то значение от пользователя и вернуть его в наш код. Значение приходит в виде строки ,поэтому чтобы привести ее к числу ,мы передаем результат prompt в функцию Number.
(обьект)  window.myData  (метод обьекта) = 'Important data'(значение)
(функция внутри переменной)  auth(greeting)  (параметр функции){
}

function displayDetails(greeting, ownerName)(параметры функции) {
}



fetch('https://api.kanye.rest') //отправить запрос
  .then(res => res.json()) //выполнить результат запроса
  .then((result) => {
    console.log(result);
  });




Приход каждого блока — отдельное событие. 
Чтобы его обработать, пользуйтесь методом on объекта запроса:

const http = require('http');

const server = http.createServer((req, res) => {
  req.on('data', (chunk) => {
    console.log(chunk); // <Buffer 66 69 65 6c 64 3d 76 61 6c 75 65>
  });
});

server.listen(3000);

Событие data, которое мы обрабатываем, происходит при получении очередного пакета данных. Когда на сервер придёт запрос, у которого есть тело, в консоли окажутся вот такие сообщения: <Buffer 66 69 65 6c 64 3d 76 61 6c 75 65>. Количество сообщений зависит от размера запроса: больше данных — больше сообщений.
Данные из сети приходят в бинарном виде. 
Получить их в JavaScript мы можем благодаря специальному объекту Buffer.
Каждый поступивший блок нужно добавлять в одну переменную.
После того как придёт последний пакет, мы целиком получим тело ответа:



const http = require('http');

const server = http.createServer((req, res) => {
  let data = '';

  req.on('data', (chunk) => {
    data += chunk.toString();
  });
});

server.listen(3000);




Когда приходит последний пакет происходит событие end 
const http = require('http');

const server = http.createServer((req, res) => {
  let data = '';

  req.on('data', (chunk) => {
    data += chunk.toString();
  });

  req.on('end', () => {
    console.log(JSON.parse(data));
  });
});

server.listen(3000);



const http = require('http');
const { PORT = 3000 } = process.env;
const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'text/html' });
  res.end(mainPageMarkup);
});
server.listen(PORT)


